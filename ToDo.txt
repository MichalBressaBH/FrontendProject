+ dark mode is working and is based on MUI Theme and React Context API
- introduce StyledComponents and style some MUI components (i.e. Button, Card)
- dark mode style declarations should be done using StyledComponents (and MUI Theme and Context API for switching)
- write some tests (component and at least one e2e scenario)
+ handle duplicate pokemon search (use some MUI components to display error message)
- add another page (route) that instead of calling poke API to retrieve one pokemon, 
gets all of them and displays them on paginated list of cards; add an input that allows the user to filter pokemon list by name
- consider accessibility of the app

- clean up App.tsx more
- clean up scss file ?
- test file could use a reusable piece of code that will simplify adding cards

Mini progress notes
- updated node, react and vite
- installed cypress
- starting to add ThemeContext thing using Context provider
- added utils/types.ts to clean up App.tsx
- made Button component more generic wth props
- theme context in App.tsx
- spreading w styled button
- added Paper component as it is made for light/dark mode
- dark mode working BUT I had to move theme to App.tsx and root is small?
- check if there is a duplicate (used find instead of include because include didn't seem to work), 
trying to add error message but it doesn't display
- check works, error message is being rendered. I used useState to keep track of an error (can work with any error tho)